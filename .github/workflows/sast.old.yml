name: Static Application Security Testing (SAST)

on:
  push:
    branches: [ main, develop, staging, production ]
    paths-ignore:
      - '**/*.md'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.svg'
      - 'docs/**'
      - '**/README*'
  pull_request:
    branches: [ main, develop, staging, production ]
    paths-ignore:
      - '**/*.md'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.svg'
      - 'docs/**'
      - '**/README*'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  sast:
    name: Run SAST Scans
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript', 'python', 'rust', 'go', 'java', 'swift' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        if: matrix.language == 'javascript' || matrix.language == 'typescript'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Rust
        if: matrix.language == 'rust'
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Set up Java
        if: matrix.language == 'java'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Swift
        if: matrix.language == 'swift'
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: '5.10'

      # --- Dependency installation per language ---
      - name: Install Node.js/TypeScript deps
        if: matrix.language == 'javascript' || matrix.language == 'typescript'
        run: |
          if [ -f package-lock.json ]; then npm ci; elif [ -f yarn.lock ]; then yarn install --frozen-lockfile; fi

      - name: Install Python deps
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install Rust deps
        if: matrix.language == 'rust'
        run: cargo fetch

      - name: Install Go deps
        if: matrix.language == 'go'
        run: go mod download

      - name: Install Java deps
        if: matrix.language == 'java'
        run: ./gradlew dependencies || true

      # --- SAST Tools ---
      - name: Run Semgrep (universal SAST)
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/ci
            p/security-audit
            p/r2c-security-audit
            p/rust
            p/python
            p/javascript
            p/typescript
            p/java
            p/golang
            p/swift
            p/secrets
          generateSarif: true
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      - name: Run CodeQL (GitHub Advanced Security)
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
        env:
          CODEQL_EXTRACTOR_PYTHON_SETUP_PY_IGNORE_MISSING_DEPS: true

      - name: Autobuild for CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          output: results-${{ matrix.language }}.sarif
        continue-on-error: true

      # --- Optional: Bandit for Python ---
      - name: Run Bandit (Python SAST)
        if: matrix.language == 'python'
        run: |
          pip install bandit
          bandit -r . -f sarif -o bandit-results.sarif || true

      # --- Optional: Cargo-audit for Rust ---
      - name: Run cargo-audit (Rust SAST)
        if: matrix.language == 'rust'
        run: |
          cargo install --locked cargo-audit || true
          cargo audit --json > cargo-audit-results.json || true

      # --- Optional: Gosec for Go ---
      - name: Run Gosec (Go SAST)
        if: matrix.language == 'go'
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-results.sarif ./... || true

      # --- Optional: TruffleHog for secrets detection ---
      - name: Run TruffleHog for secrets scanning
        uses: trufflesecurity/trufflehog@v3
        with:
          scanArguments: --json .

      # --- Upload results to GitHub Security tab ---
      - name: Upload SARIF results (Semgrep)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep

      - name: Upload SARIF results (CodeQL)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results-${{ matrix.language }}.sarif
          category: codeql

      - name: Upload SARIF results (Bandit)
        if: matrix.language == 'python' && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.sarif
          category: bandit

      - name: Upload SARIF results (Gosec)
        if: matrix.language == 'go' && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
          category: gosec

      # --- Optional: Notify Slack or Teams on findings (production) ---
      - name: Notify Slack on critical findings
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "*SAST Scan Failure* in ${{ github.repository }} on ${{ github.ref }}.\nCheck GitHub Security tab for details."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # --- Advanced: Archive all scan artifacts ---
      - name: Upload all SAST artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-artifacts-${{ matrix.language }}
          path: |
            *.sarif
            *.json
